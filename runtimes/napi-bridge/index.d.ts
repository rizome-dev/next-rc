/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

/** Language enum for runtime selection */
export const enum Language {
  Rust = 0,
  JavaScript = 1,
  TypeScript = 2,
  Python = 3,
  Go = 4,
  C = 5,
  Cpp = 6,
  Wasm = 7
}
/** Trust level for security */
export const enum TrustLevel {
  Low = 0,
  Medium = 1,
  High = 2
}
/** Module identifier */
export interface ModuleId {
  id: string
}
/** Instance identifier */
export interface InstanceId {
  id: string
}
/** Execution configuration */
export interface ExecutionConfig {
  timeoutMs: number
  memoryLimitBytes: number
  trustLevel: TrustLevel
  networkAccess: boolean
  filesystemAccess: boolean
}
/** Execution result */
export interface ExecutionResult {
  success: boolean
  output: string
  error?: string
  executionTimeMs: number
  memoryUsedBytes: number
  exitCode?: number
}
/** Runtime status */
export interface RuntimeStatus {
  runtimeType: string
  initialized: boolean
  activeInstances: number
  totalExecutions: number
  successfulExecutions: number
  failedExecutions: number
  avgExecutionTimeMs: number
}
/** Workload hint for intelligent scheduling */
export interface WorkloadHint {
  expectedDurationMs?: number
  latencyRequirement: string
  complexity: string
  cpuIntensive: boolean
  memoryIntensive: boolean
}
/** Scheduling decision */
export interface SchedulingDecision {
  runtimeType: string
  reasoning: string
  confidence: number
}
/** Runtime performance metrics */
export interface RuntimeMetrics {
  runtimeType: string
  coldStartLatencyNs: number
  memoryOverheadBytes: number
  executionOverheadPercent: number
  activeInstances: number
}
/** Initialize the runtime controller */
export declare function initializeRuntimeController(): void
/** Get runtime controller version */
export declare function getVersion(): string
/** Get available runtimes */
export declare function getAvailableRuntimes(): Array<string>
/** Get metrics for all runtimes */
export declare function getRuntimeMetrics(): Promise<Array<RuntimeMetrics>>
/** WASM Runtime Bridge */
export declare class WasmRuntimeBridge {
  /** Create a new WASM runtime */
  constructor()
  /** Initialize the runtime */
  initialize(): Promise<void>
  /** Compile code to a WASM module */
  compile(code: string, language: Language): Promise<ModuleId>
  /** Instantiate a compiled module */
  instantiate(moduleId: ModuleId): Promise<InstanceId>
  /** Execute code in an instance */
  execute(instanceId: InstanceId, config: ExecutionConfig): Promise<ExecutionResult>
  /** Destroy an instance */
  destroy(instanceId: InstanceId): Promise<void>
  /** Get runtime status */
  getStatus(): Promise<RuntimeStatus>
  /** Get performance metrics */
  getPerformanceMetrics(): Promise<RuntimeMetrics>
  /** Pre-warm the runtime for faster startup */
  preWarm(count: number): Promise<void>
  /** Get memory pool statistics */
  getMemoryStats(): Promise<any>
}
/** eBPF Runtime Bridge for ultra-low latency execution */
export declare class EbpfRuntimeBridge {
  /** Create a new eBPF runtime */
  constructor()
  /** Initialize the eBPF runtime */
  initialize(): Promise<void>
  /** Compile eBPF code to bytecode */
  compile(code: string, language: Language): Promise<ModuleId>
  /** Load and verify eBPF program */
  loadProgram(moduleId: ModuleId): Promise<InstanceId>
  /** Execute eBPF program with input data */
  executeFilter(instanceId: InstanceId, inputData: Buffer): Promise<ExecutionResult>
  /** Execute eBPF program (general interface) */
  execute(instanceId: InstanceId, config: ExecutionConfig): Promise<ExecutionResult>
  /** Unload eBPF program */
  destroy(instanceId: InstanceId): Promise<void>
  /** Get eBPF runtime status */
  getStatus(): Promise<RuntimeStatus>
  /** Get eBPF performance metrics */
  getPerformanceMetrics(): Promise<RuntimeMetrics>
  /** Verify eBPF bytecode without loading */
  verifyProgram(bytecode: Buffer): Promise<boolean>
  /** Get eBPF JIT compilation statistics */
  getJitStats(): Promise<any>
  /** Enable eBPF program tracing for debugging */
  enableTracing(instanceId: InstanceId): Promise<void>
}
